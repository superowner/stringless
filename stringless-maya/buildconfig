#-
# ==========================================================================
# Copyright 2012 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk
# license agreement provided at the time of installation or download,
# or which otherwise accompanies this software in either electronic
# or hard copy form.
# ==========================================================================
#+
mayaVersion := 2017
gccVersion := 

# If you have Maya installed in a non-standard location, uncomment the
# following line and set the path to the directory of your Maya
# installation:
# MAYA_LOCATION = /your/path/to/maya
export MAYA_LOCATION


#-------------------------------------------------------------
#
#       Try to find Maya
#
#-------------------------------------------------------------
ifeq ($(MAYA_LOCATION),)
    MAYA_LOCATION = /usr/autodesk/maya$(mayaVersion)

    ifeq ($(wildcard $(MAYA_LOCATION)/include/maya/MTypes.h),)
        $(error Cannot find Maya ${mayaVersion}. Please uncomment the \
                MAYA_LOCATION setting near the top of 'buildconfig' and set \
                it to point to the directory where Maya ${mayaVersion} \
                is installed)
    endif
else ifeq ($(wildcard $(MAYA_LOCATION)/include/maya/MTypes.h),)
    $(error The MAYA_LOCATION environment variable does not point to the \
            directory where Maya is installed)
else
    # Make sure that MAYA_LOCATION is pointing at the correct version of
    # Maya.
    #
    # Matching subversions (e.g. 2013.5) is not possible without a lookup
    # table, so if this is a sub-version then just make sure that we've
    # got the right base version. Not perfect, but better than nothing.
    baseMayaVersion := $(shell echo $(mayaVersion) | sed 's/\..*//')

    apiVersion := $(shell grep 'define.*MAYA_API_VERSION' $(MAYA_LOCATION)/include/maya/MTypes.h | sed 's/^[^0-9]*\([0-9]...\).*$$/\1/')

    ifneq ($(apiVersion),$(baseMayaVersion))
        $(error The MAYA_LOCATION environment variable is pointing to \
                version $(apiVersion) of Maya. Either change it to point to \
                the directory where Maya $(mayaVersion) is installed or else \
                uncomment the MAYA_LOCATION setting near the top of 'buildconfig' \
                and change that to point to the location of Maya $(mayaVersion))
    endif
endif


#-------------------------------------------------------------
#
#		Try to find the correct version of gcc
#
#-------------------------------------------------------------

# If 'CC' is undefined or is the wrong version of gcc then we need to
# try to find the correct version.
ifneq ($(CC),)
    CC := gcc
endif

# If 'CXX' is undefined or is the wrong version of g++ then we need to
# try to find the correct version.
ifneq ($(CXX),)
	CXX := g++
endif


#-------------------------------------------------------------
#
#		Miscellaneous other settings.
#
#-------------------------------------------------------------

CFLAGS = -DBits64_ -m64 -DUNIX -D_BOOL -DLINUX -DFUNCPROTO -D_GNU_SOURCE \
         -DLINUX_64 -fPIC \
         -fno-strict-aliasing -DREQUIRE_IOSTREAM -O3 -Wall \
         -Wno-multichar -Wno-comment -Wno-sign-compare -funsigned-char \
         -pthread

C++FLAGS = $(CFLAGS) $(WARNFLAGS) \
        -std=c++11 \
        -Wno-deprecated -Wno-reorder \
        -fno-gnu-keywords

DEVKIT                = $(MAYA_LOCATION)/devkit
DEVKIT_INCLUDE        = $(MAYA_LOCATION)/include
DEVKIT_ALEMBIC_INCDIR = $(DEVKIT)/Alembic/include
DEVKIT_ALEMBIC_LIBDIR = $(DEVKIT)/Alembic/lib

INCLUDES	= -I$(SRCDIR) -I$(DEVKIT_INCLUDE) -I/usr/X11R6/include

# -Bsymbolic binds references to global symbols within the library.
# This avoids symbol clashes in other shared libraries but forces
# the linking of all required libraries.
LFLAGS        = $(C++FLAGS) -Wl,-Bsymbolic -shared

# When compiling plug-ins for Maya, we make sure to export only the
# symbols for the initializePlugin(MObject) and
# uninitializePlugin(MObject) functions. In particular, this
# prevents the plug-ins from exporting symbols coming from static
# libaries against which the plug-ins is linked.
#
# Here's why:
#
# Plug-ins are written by separate developers. Each of them might
# want to use various libraries to implement their plug-ins. At
# times, it occurs that plug-ins written by different developers are
# using different and "incompatible" versions of the same library. To
# support this, we recommend that plug-ins be linked against static
# versions of these libraries. And, by hidding the symbols of these
# libraries, we prevent the two incompatible versions of the library
# from interferring with each others.
LFLAGS 		 += -Wl,--version-script=$(TOP)/linux_plugin.map

LD            = $(CXX) 
LIBS          = -L$(MAYA_LOCATION)/lib
EXT           = so

# Makedepend flags
#
# Ignore dependencies on system header files.
MDFLAGS = -Y

# Find out if the Qt development tools are installed.
QMAKE = $(shell which qmake 2> /dev/null)
